#  SPDX-License-Identifier: BSD-2-Clause-Patent @EDKII:/BaseTools/Conf/tools_def.template
#
#!VERSION=2.00

IDENTIFIER = Default TOOL_CHAIN_CONF

####################################################################################
#
# format: TARGET_TOOLCHAIN_ARCH_COMMANDTYPE_ATTRIBUTE = <string>
# priority:
#         TARGET_TOOLCHAIN_ARCH_COMMANDTYPE_ATTRIBUTE (Highest)
#         ******_TOOLCHAIN_ARCH_COMMANDTYPE_ATTRIBUTE
#         TARGET_*********_ARCH_COMMANDTYPE_ATTRIBUTE
#         ******_*********_ARCH_COMMANDTYPE_ATTRIBUTE
#         TARGET_TOOLCHAIN_****_COMMANDTYPE_ATTRIBUTE
#         ******_TOOLCHAIN_****_COMMANDTYPE_ATTRIBUTE
#         TARGET_*********_****_COMMANDTYPE_ATTRIBUTE
#         ******_*********_****_COMMANDTYPE_ATTRIBUTE
#         TARGET_TOOLCHAIN_ARCH_***********_ATTRIBUTE
#         ******_TOOLCHAIN_ARCH_***********_ATTRIBUTE
#         TARGET_*********_ARCH_***********_ATTRIBUTE
#         ******_*********_ARCH_***********_ATTRIBUTE
#         TARGET_TOOLCHAIN_****_***********_ATTRIBUTE
#         ******_TOOLCHAIN_****_***********_ATTRIBUTE
#         TARGET_*********_****_***********_ATTRIBUTE
#         ******_*********_****_***********_ATTRIBUTE (Lowest)
#
####################################################################################
####################################################################################
#
# Supported Tool Chains
# =====================
#   VS2019    -Windows-  Requires:
#                             Microsoft Visual Studio 2019 version 16.2 or later
#                       Optional:
#                             Required to build EBC drivers:
#                               Intel(r) Compiler for Efi Byte Code (Intel(r) EBC Compiler)
#                             Required to build platforms or ACPI tables:
#                               Intel(r) ACPI Compiler (iasl.exe) from
#                               https://acpica.org/downloads
#                       Note:
#                             Building of XIP firmware images for ARM/ARM64 is not currently supported (only applications).
#                             /FILEALIGN:4096 and other changes are needed for ARM firmware builds.
#   GCC5      -Linux, Windows-  Requires:
#                             GCC 5 with LTO support, targeting x86_64-linux-gnu, aarch64-linux-gnu, arm-linux-gnueabi or riscv64-linux-gnu
#                       Optional:
#                             Required to build platforms or ACPI tables:
#                               Intel(r) ACPI Compiler from
#                               https://acpica.org/downloads
#   CLANGPDB  -Linux, Windows, MacOS-  Requires:
#                             Clang 9 or above from http://releases.llvm.org/
#                       Optional:
#                             Required to compile nasm source:
#                               nasm compiler from
#                               NASM -- http://www.nasm.us/
#                             Required to build platforms or ACPI tables:
#                               Intel(r) ACPI Compiler from
#                               https://acpica.org/downloads
####################################################################################
####################################################################################
#
# Supported Tool Chain Family
# ===========================
#   MSFT                - Microsoft
#   GCC                 - GNU GCC
####################################################################################
####################################################################################
#
# Other Supported Tools
# =====================
#   NASM -- http://www.nasm.us/
#   - NASM 2.12.01 or later for use with all toolchain families
#
####################################################################################

####################################################################################
#   VS2019 - DEFINE
####################################################################################
DEFINE VS_HOST                          = x86
DEFINE VS2019_BIN                       = ENV(VS2019_PREFIX)bin
DEFINE VS2019_BIN_HOST                  = DEF(VS2019_BIN)\HostDEF(VS_HOST)\DEF(VS_HOST)
DEFINE VS2019_BIN_IA32                  = DEF(VS2019_BIN)\HostDEF(VS_HOST)\x86
DEFINE VS2019_BIN_X64                   = DEF(VS2019_BIN)\HostDEF(VS_HOST)\x64
DEFINE VS2019_BIN_ARM                   = DEF(VS2019_BIN)\HostDEF(VS_HOST)\arm
DEFINE VS2019_BIN_AARCH64               = DEF(VS2019_BIN)\HostDEF(VS_HOST)\arm64
DEFINE EBC_BIN                          = C:\Program Files\Intel\EBC\Bin
DEFINE EBC_BINx86                       = C:\Program Files (x86)\Intel\EBC\Bin
####################################################################################
#   VS2019 - Microsoft Visual Studio 2019 with Intel ASL
####################################################################################
*_VS2019_*_*_FAMILY                     = MSFT
*_VS2019_*_*_DLL                        = DEF(VS2019_BIN_HOST)

*_VS2019_*_MAKE_PATH                    = DEF(VS2019_BIN_HOST)\nmake.exe
*_VS2019_*_MAKE_FLAG                    = /nologo
*_VS2019_*_RC_PATH                      = ENV(WINSDK_PATH_FOR_RC_EXE)\rc.exe

*_VS2019_*_MAKE_FLAGS                   = /nologo
*_VS2019_*_SLINK_FLAGS                  = /NOLOGO /LTCG
*_VS2019_*_APP_FLAGS                    = /nologo /E /TC
*_VS2019_*_PP_FLAGS                     = /nologo /E /TC /FIAutoGen.h
*_VS2019_*_VFRPP_FLAGS                  = /nologo /E /TC /DVFRCOMPILE /FI$(MODULE_NAME)StrDefs.h
*_VS2019_*_DLINK2_FLAGS                 = /WHOLEARCHIVE
*_VS2019_*_ASM16_PATH                   = DEF(VS2019_BIN_IA32)\ml.exe
*_VS2019_*_DEPS_FLAGS                   = /showIncludes
##################
# ASL definitions
##################
*_VS2019_*_ASL_PATH                     = ENV(IASL_PREFIX)iasl.exe
*_VS2019_*_ASL_FLAGS                    =
*_VS2019_*_ASL_OUTFLAGS                 = -p
*_VS2019_*_ASLCC_FLAGS                  = /nologo /c /FIAutoGen.h /TC /Dmain=ReferenceAcpiTable
*_VS2019_*_ASLPP_FLAGS                  = /nologo /E /C /FIAutoGen.h
*_VS2019_*_ASLDLINK_FLAGS               = /NODEFAULTLIB /ENTRY:ReferenceAcpiTable /SUBSYSTEM:CONSOLE

##################
# IA32 definitions
##################
*_VS2019_IA32_CC_PATH                   = DEF(VS2019_BIN_IA32)\cl.exe
*_VS2019_IA32_VFRPP_PATH                = DEF(VS2019_BIN_IA32)\cl.exe
*_VS2019_IA32_ASLCC_PATH                = DEF(VS2019_BIN_IA32)\cl.exe
*_VS2019_IA32_ASLPP_PATH                = DEF(VS2019_BIN_IA32)\cl.exe
*_VS2019_IA32_SLINK_PATH                = DEF(VS2019_BIN_IA32)\lib.exe
*_VS2019_IA32_DLINK_PATH                = DEF(VS2019_BIN_IA32)\link.exe
*_VS2019_IA32_ASLDLINK_PATH             = DEF(VS2019_BIN_IA32)\link.exe
*_VS2019_IA32_APP_PATH                  = DEF(VS2019_BIN_IA32)\cl.exe
*_VS2019_IA32_PP_PATH                   = DEF(VS2019_BIN_IA32)\cl.exe
*_VS2019_IA32_ASM_PATH                  = DEF(VS2019_BIN_IA32)\ml.exe

      *_VS2019_IA32_MAKE_FLAGS          = /nologo
  DEBUG_VS2019_IA32_CC_FLAGS            = /nologo /arch:IA32 /c /WX /GS- /W4 /Gs32768 /D UNICODE /O1b2 /GL /FIAutoGen.h /EHs-c- /GR- /GF /Gy /Z7 /Gw
RELEASE_VS2019_IA32_CC_FLAGS            = /nologo /arch:IA32 /c /WX /GS- /W4 /Gs32768 /D UNICODE /O1b2 /GL /FIAutoGen.h /EHs-c- /GR- /GF /Gw
  NOOPT_VS2019_IA32_CC_FLAGS            = /nologo /arch:IA32 /c /WX /GS- /W4 /Gs32768 /D UNICODE /FIAutoGen.h /EHs-c- /GR- /GF /Gy /Z7 /Od

  DEBUG_VS2019_IA32_ASM_FLAGS           = /nologo /c /WX /W3 /Cx /coff /Zd /Zi
RELEASE_VS2019_IA32_ASM_FLAGS           = /nologo /c /WX /W3 /Cx /coff /Zd
  NOOPT_VS2019_IA32_ASM_FLAGS           = /nologo /c /WX /W3 /Cx /coff /Zd /Zi

  DEBUG_VS2019_IA32_NASM_FLAGS          = -Ox -f win32 -g
RELEASE_VS2019_IA32_NASM_FLAGS          = -Ox -f win32
  NOOPT_VS2019_IA32_NASM_FLAGS          = -O0 -f win32 -g

  DEBUG_VS2019_IA32_DLINK_FLAGS         = /NOLOGO /NODEFAULTLIB /IGNORE:4001 /OPT:REF /OPT:ICF=10 /MAP /ALIGN:32 /SECTION:.xdata,D /SECTION:.pdata,D /MACHINE:X86 /LTCG /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /BASE:0 /DRIVER /DEBUG
RELEASE_VS2019_IA32_DLINK_FLAGS         = /NOLOGO /NODEFAULTLIB /IGNORE:4001 /IGNORE:4254 /OPT:REF /OPT:ICF=10 /MAP /ALIGN:32 /SECTION:.xdata,D /SECTION:.pdata,D /MACHINE:X86 /LTCG /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /BASE:0 /DRIVER /MERGE:.rdata=.data
  NOOPT_VS2019_IA32_DLINK_FLAGS         = /NOLOGO /NODEFAULTLIB /IGNORE:4001 /OPT:REF /OPT:ICF=10 /MAP /ALIGN:32 /SECTION:.xdata,D /SECTION:.pdata,D /MACHINE:X86 /LTCG /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /BASE:0 /DRIVER /DEBUG

##################
# X64 definitions
##################
*_VS2019_X64_CC_PATH                    = DEF(VS2019_BIN_X64)\cl.exe
*_VS2019_X64_PP_PATH                    = DEF(VS2019_BIN_X64)\cl.exe
*_VS2019_X64_APP_PATH                   = DEF(VS2019_BIN_X64)\cl.exe
*_VS2019_X64_VFRPP_PATH                 = DEF(VS2019_BIN_X64)\cl.exe
*_VS2019_X64_ASLCC_PATH                 = DEF(VS2019_BIN_X64)\cl.exe
*_VS2019_X64_ASLPP_PATH                 = DEF(VS2019_BIN_X64)\cl.exe
*_VS2019_X64_ASM_PATH                   = DEF(VS2019_BIN_X64)\ml64.exe
*_VS2019_X64_SLINK_PATH                 = DEF(VS2019_BIN_X64)\lib.exe
*_VS2019_X64_DLINK_PATH                 = DEF(VS2019_BIN_X64)\link.exe
*_VS2019_X64_ASLDLINK_PATH              = DEF(VS2019_BIN_X64)\link.exe

  DEBUG_VS2019_X64_CC_FLAGS             = /nologo /c /WX /GS- /W4 /Gs32768 /D UNICODE /O1b2s /GL /Gy /FIAutoGen.h /EHs-c- /GR- /GF /Z7 /Gw
RELEASE_VS2019_X64_CC_FLAGS             = /nologo /c /WX /GS- /W4 /Gs32768 /D UNICODE /O1b2s /GL /Gy /FIAutoGen.h /EHs-c- /GR- /GF /Gw
  NOOPT_VS2019_X64_CC_FLAGS             = /nologo /c /WX /GS- /W4 /Gs32768 /D UNICODE /Gy /FIAutoGen.h /EHs-c- /GR- /GF /Z7 /Od

  DEBUG_VS2019_X64_ASM_FLAGS            = /nologo /c /WX /W3 /Cx /Zd /Zi
RELEASE_VS2019_X64_ASM_FLAGS            = /nologo /c /WX /W3 /Cx /Zd
  NOOPT_VS2019_X64_ASM_FLAGS            = /nologo /c /WX /W3 /Cx /Zd /Zi

  DEBUG_VS2019_X64_NASM_FLAGS           = -Ox -f win64 -g
RELEASE_VS2019_X64_NASM_FLAGS           = -Ox -f win64
  NOOPT_VS2019_X64_NASM_FLAGS           = -O0 -f win64 -g

  DEBUG_VS2019_X64_DLINK_FLAGS          = /NOLOGO /NODEFAULTLIB /IGNORE:4001 /IGNORE:4281 /OPT:REF /OPT:ICF=10 /MAP /ALIGN:32 /SECTION:.xdata,D /SECTION:.pdata,D /Machine:X64 /LTCG /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /BASE:0 /DRIVER /DEBUG
RELEASE_VS2019_X64_DLINK_FLAGS          = /NOLOGO /NODEFAULTLIB /IGNORE:4001 /IGNORE:4281 /IGNORE:4254 /OPT:REF /OPT:ICF=10 /MAP /ALIGN:32 /SECTION:.xdata,D /SECTION:.pdata,D /Machine:X64 /LTCG /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /BASE:0 /DRIVER /MERGE:.rdata=.data
  NOOPT_VS2019_X64_DLINK_FLAGS          = /NOLOGO /NODEFAULTLIB /IGNORE:4001 /IGNORE:4281 /OPT:REF /OPT:ICF=10 /MAP /ALIGN:32 /SECTION:.xdata,D /SECTION:.pdata,D /Machine:X64 /LTCG /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /BASE:0 /DRIVER /DEBUG

#################
# ARM definitions
#################
*_VS2019_ARM_CC_PATH                    = DEF(VS2019_BIN_ARM)\cl.exe
*_VS2019_ARM_VFRPP_PATH                 = DEF(VS2019_BIN_ARM)\cl.exe
*_VS2019_ARM_SLINK_PATH                 = DEF(VS2019_BIN_ARM)\lib.exe
*_VS2019_ARM_DLINK_PATH                 = DEF(VS2019_BIN_ARM)\link.exe
*_VS2019_ARM_APP_PATH                   = DEF(VS2019_BIN_ARM)\cl.exe
*_VS2019_ARM_PP_PATH                    = DEF(VS2019_BIN_ARM)\cl.exe
*_VS2019_ARM_ASM_PATH                   = DEF(VS2019_BIN_ARM)\armasm.exe
*_VS2019_ARM_ASLCC_PATH                 = DEF(VS2019_BIN_ARM)\cl.exe
*_VS2019_ARM_ASLPP_PATH                 = DEF(VS2019_BIN_ARM)\cl.exe
*_VS2019_ARM_ASLDLINK_PATH              = DEF(VS2019_BIN_ARM)\link.exe

      *_VS2019_ARM_MAKE_FLAGS           = /nologo
  DEBUG_VS2019_ARM_CC_FLAGS             = /nologo /c /WX /GS- /W4 /Gs32768 /D UNICODE /O1b2 /GL /FIAutoGen.h /EHs-c- /GR- /GF /Gy /Zi /Gw /Oi-
RELEASE_VS2019_ARM_CC_FLAGS             = /nologo /c /WX /GS- /W4 /Gs32768 /D UNICODE /O1b2 /GL /FIAutoGen.h /EHs-c- /GR- /GF /Gw /Oi-
  NOOPT_VS2019_ARM_CC_FLAGS             = /nologo /c /WX /GS- /W4 /Gs32768 /D UNICODE /FIAutoGen.h /EHs-c- /GR- /GF /Gy /Zi /Od /Oi-

  DEBUG_VS2019_ARM_ASM_FLAGS            = /nologo /g
RELEASE_VS2019_ARM_ASM_FLAGS            = /nologo
  NOOPT_VS2019_ARM_ASM_FLAGS            = /nologo

  DEBUG_VS2019_ARM_DLINK_FLAGS          = /NOLOGO /NODEFAULTLIB /IGNORE:4001 /OPT:REF /OPT:ICF=10 /MAP /SECTION:.xdata,D /SECTION:.pdata,D /MACHINE:ARM /LTCG /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /BASE:0 /DRIVER /DEBUG
RELEASE_VS2019_ARM_DLINK_FLAGS          = /NOLOGO /NODEFAULTLIB /IGNORE:4001 /IGNORE:4254 /OPT:REF /OPT:ICF=10 /MAP /SECTION:.xdata,D /SECTION:.pdata,D /MACHINE:ARM /LTCG /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /BASE:0 /DRIVER /MERGE:.rdata=.data
  NOOPT_VS2019_ARM_DLINK_FLAGS          = /NOLOGO /NODEFAULTLIB /IGNORE:4001 /OPT:REF /OPT:ICF=10 /MAP /SECTION:.xdata,D /SECTION:.pdata,D /MACHINE:ARM /LTCG /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /BASE:0 /DRIVER /DEBUG

#####################
# AARCH64 definitions
#####################
*_VS2019_AARCH64_CC_PATH                = DEF(VS2019_BIN_AARCH64)\cl.exe
*_VS2019_AARCH64_VFRPP_PATH             = DEF(VS2019_BIN_AARCH64)\cl.exe
*_VS2019_AARCH64_SLINK_PATH             = DEF(VS2019_BIN_AARCH64)\lib.exe
*_VS2019_AARCH64_DLINK_PATH             = DEF(VS2019_BIN_AARCH64)\link.exe
*_VS2019_AARCH64_APP_PATH               = DEF(VS2019_BIN_AARCH64)\cl.exe
*_VS2019_AARCH64_PP_PATH                = DEF(VS2019_BIN_AARCH64)\cl.exe
*_VS2019_AARCH64_ASM_PATH               = DEF(VS2019_BIN_AARCH64)\armasm64.exe
*_VS2019_AARCH64_ASLCC_PATH             = DEF(VS2019_BIN_AARCH64)\cl.exe
*_VS2019_AARCH64_ASLPP_PATH             = DEF(VS2019_BIN_AARCH64)\cl.exe
*_VS2019_AARCH64_ASLDLINK_PATH          = DEF(VS2019_BIN_AARCH64)\link.exe

      *_VS2019_AARCH64_MAKE_FLAGS       = /nologo
  DEBUG_VS2019_AARCH64_CC_FLAGS         = /nologo /c /WX /GS- /W4 /Gs32768 /D UNICODE /O1b2 /GL /FIAutoGen.h /EHs-c- /GR- /GF /Gy /Zi /Gw /Oi-
RELEASE_VS2019_AARCH64_CC_FLAGS         = /nologo /c /WX /GS- /W4 /Gs32768 /D UNICODE /O1b2 /GL /FIAutoGen.h /EHs-c- /GR- /GF /Gw /Oi-
  NOOPT_VS2019_AARCH64_CC_FLAGS         = /nologo /c /WX /GS- /W4 /Gs32768 /D UNICODE /FIAutoGen.h /EHs-c- /GR- /GF /Gy /Zi /Od /Oi-

  DEBUG_VS2019_AARCH64_ASM_FLAGS        = /nologo /g
RELEASE_VS2019_AARCH64_ASM_FLAGS        = /nologo
  NOOPT_VS2019_AARCH64_ASM_FLAGS        = /nologo

  DEBUG_VS2019_AARCH64_DLINK_FLAGS      = /NOLOGO /NODEFAULTLIB /IGNORE:4001 /OPT:REF /OPT:ICF=10 /MAP /SECTION:.xdata,D /SECTION:.pdata,D /MACHINE:ARM64 /LTCG /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /DRIVER /DEBUG
RELEASE_VS2019_AARCH64_DLINK_FLAGS      = /NOLOGO /NODEFAULTLIB /IGNORE:4001 /IGNORE:4254 /OPT:REF /OPT:ICF=10 /MAP /SECTION:.xdata,D /SECTION:.pdata,D /MACHINE:ARM64 /LTCG /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /DRIVER /MERGE:.rdata=.data
  NOOPT_VS2019_AARCH64_DLINK_FLAGS      = /NOLOGO /NODEFAULTLIB /IGNORE:4001 /OPT:REF /OPT:ICF=10 /MAP /SECTION:.xdata,D /SECTION:.pdata,D /MACHINE:ARM64 /LTCG /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /DRIVER /DEBUG

##################
# EBC definitions
##################
*_VS2019_EBC_*_FAMILY                   = INTEL

*_VS2019_EBC_PP_PATH                    = DEF(EBC_BINx86)\iec.exe
*_VS2019_EBC_VFRPP_PATH                 = DEF(EBC_BINx86)\iec.exe
*_VS2019_EBC_CC_PATH                    = DEF(EBC_BINx86)\iec.exe
*_VS2019_EBC_SLINK_PATH                 = DEF(VS2019_BIN_IA32)\link.exe
*_VS2019_EBC_DLINK_PATH                 = DEF(VS2019_BIN_IA32)\link.exe

*_VS2019_EBC_MAKE_FLAGS                 = /nologo
*_VS2019_EBC_PP_FLAGS                   = /nologo /E /TC /FIAutoGen.h
*_VS2019_EBC_CC_FLAGS                   = /nologo /c /WX /W3 /FIAutoGen.h /D$(MODULE_ENTRY_POINT)=$(ARCH_ENTRY_POINT)
*_VS2019_EBC_VFRPP_FLAGS                = /nologo /E /TC /DVFRCOMPILE /FI$(MODULE_NAME)StrDefs.h
*_VS2019_EBC_SLINK_FLAGS                = /lib /NOLOGO /MACHINE:EBC
*_VS2019_EBC_DLINK_FLAGS                = "C:\Program Files (x86)\Intel\EBC\Lib\EbcLib.lib" /NOLOGO /NODEFAULTLIB /MACHINE:EBC /OPT:REF /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /MAP /ALIGN:32 /DRIVER
####################################################################################

####################################################################################
# GCC 5 - DEFINE
####################################################################################
*_*_*_OBJCOPY_PATH                      = echo
*_*_*_OBJCOPY_FLAGS                     = objcopy not needed for
*_*_*_SYMRENAME_PATH                    = echo
*_*_*_SYMRENAME_FLAGS                   = Symbol renaming not needed for
*_*_*_DTC_FLAGS                         = -H epapr
*_*_*_DTCPP_PATH                        = ENV(DTCPP_PREFIX)cpp
*_*_*_DTC_PATH                          = ENV(DTC_PREFIX)dtc
  DEBUG_*_*_OBJCOPY_ADDDEBUGFLAG        = --add-gnu-debuglink=$(DEBUG_DIR)/$(MODULE_NAME).debug
RELEASE_*_*_OBJCOPY_ADDDEBUGFLAG        =
  NOOPT_*_*_OBJCOPY_ADDDEBUGFLAG        = --add-gnu-debuglink=$(DEBUG_DIR)/$(MODULE_NAME).debug

DEFINE GCC_ALL_F_CC_FLAGS               = -fno-builtin -fno-common -fno-stack-protector -fno-strict-aliasing -fshort-wchar -fdata-sections -ffunction-sections
DEFINE GCC_ALL_M_CC_FLAGS               = -mno-stack-arg-probe
DEFINE GCC_ALL_W_CC_FLAGS               = -Wall -Werror -Wno-address -Wno-array-bounds
DEFINE GCC_ALL_CC_FLAGS                 = -g -Os -include AutoGen.h -DSTRING_ARRAY_NAME=$(BASE_NAME)Strings DEF(GCC_ALL_F_CC_FLAGS) DEF(GCC_ALL_M_CC_FLAGS) DEF(GCC_ALL_W_CC_FLAGS)
DEFINE GCC_IA32_CC_FLAGS                = DEF(GCC_ALL_CC_FLAGS) -m32 -freorder-blocks -freorder-blocks-and-partition -fno-asynchronous-unwind-tables -fno-pic -fno-pie -malign-double
DEFINE GCC_X64_CC_FLAGS                 = DEF(GCC_ALL_CC_FLAGS) -m64                                                 -fno-asynchronous-unwind-tables          -fpie                   -mno-red-zone  

DEFINE GCC_PP_FLAGS                     = -E -x assembler-with-cpp -include AutoGen.h
DEFINE GCC_VFRPP_FLAGS                  = -x c -E -P -DVFRCOMPILE --include $(MODULE_NAME)StrDefs.h
DEFINE GCC_ASLPP_FLAGS                  = -x c -E -include AutoGen.h
DEFINE GCC_ASLCC_FLAGS                  = -x c
DEFINE GCC_IA32_RC_FLAGS                = -I binary -O elf32-i386          -B i386    --rename-section .data=.hii
DEFINE GCC_X64_RC_FLAGS                 = -I binary -O elf64-x86-64        -B i386    --rename-section .data=.hii
DEFINE GCC_RISCV64_RC_FLAGS             = -I binary -O elf64-littleriscv   -B riscv   --rename-section .data=.hii

DEFINE GCC5_IA32_CC_FLAGS               = DEF(GCC_IA32_CC_FLAGS)  -DEFI32  -march=i586
DEFINE GCC5_X64_CC_FLAGS                = DEF(GCC_X64_CC_FLAGS)  "-DEFIAPI=__attribute__((ms_abi))" -maccumulate-outgoing-args -mcmodel=small
DEFINE GCC5_IA32_X64_DLINK_COMMON       = -nostdlib -Wl,-n,-q,--gc-sections -z common-page-size=0x40
DEFINE GCC5_IA32_X64_ASLDLINK_FLAGS     = DEF(GCC5_IA32_X64_DLINK_COMMON) -Wl,--defsym=PECOFF_HEADER_SIZE=0     -Wl,--script=$(EDK_TOOLS_PATH)/Scripts/GccBase.lds -Wl,--entry,ReferenceAcpiTable   -u ReferenceAcpiTable
DEFINE GCC5_IA32_X64_DLINK_FLAGS        = DEF(GCC5_IA32_X64_DLINK_COMMON) -Wl,-Map,$(DEST_DIR_DEBUG)/$(BASE_NAME).map,--whole-archive                              -Wl,--entry,$(IMAGE_ENTRY_POINT) -u $(IMAGE_ENTRY_POINT)
DEFINE GCC5_IA32_DLINK2_FLAGS           = -Wno-error                      -Wl,--defsym=PECOFF_HEADER_SIZE=0x220 -Wl,--script=$(EDK_TOOLS_PATH)/Scripts/GccBase.lds
DEFINE GCC5_X64_DLINK2_FLAGS            = -Wno-error                      -Wl,--defsym=PECOFF_HEADER_SIZE=0x228 -Wl,--script=$(EDK_TOOLS_PATH)/Scripts/GccBase.lds
DEFINE GCC5_ASM_FLAGS                   = -c -x assembler -imacros AutoGen.h
DEFINE GCC5_ASLCC_FLAGS                 = DEF(GCC_ASLCC_FLAGS) -fno-lto
####################################################################################
# GCC 5 - This configuration is to produce PE/COFF binaries
####################################################################################
*_GCC5_*_*_FAMILY                       = GCC

*_GCC5_*_MAKE_PATH                      = ENV(GCC_HOST_BIN)make
*_GCC5_*_*_DLL                          = ENV(GCC5_DLL)
*_GCC5_*_ASL_PATH                       = ENV(IASL_PREFIX)iasl

*_GCC5_*_PP_FLAGS                       = DEF(GCC_PP_FLAGS)
*_GCC5_*_ASLPP_FLAGS                    = DEF(GCC_ASLPP_FLAGS)
*_GCC5_*_ASLCC_FLAGS                    = DEF(GCC_ASLCC_FLAGS)
*_GCC5_*_VFRPP_FLAGS                    = DEF(GCC_VFRPP_FLAGS)
*_GCC5_*_APP_FLAGS                      =
*_GCC5_*_ASL_FLAGS                      =
*_GCC5_*_ASL_OUTFLAGS                   = -p
*_GCC5_*_DEPS_FLAGS                     = -MMD -MF $@.deps

##################
# GCC5 IA32 definitions
##################
*_GCC5_IA32_OBJCOPY_PATH                = ENV(GCC_PREFIX)objcopy
*_GCC5_IA32_CC_PATH                     = ENV(GCC_PREFIX)gcc
*_GCC5_IA32_SLINK_PATH                  = ENV(GCC_PREFIX)gcc-ar
*_GCC5_IA32_DLINK_PATH                  = ENV(GCC_PREFIX)gcc
*_GCC5_IA32_ASLDLINK_PATH               = ENV(GCC_PREFIX)gcc
*_GCC5_IA32_ASM_PATH                    = ENV(GCC_PREFIX)gcc
*_GCC5_IA32_PP_PATH                     = ENV(GCC_PREFIX)gcc
*_GCC5_IA32_VFRPP_PATH                  = ENV(GCC_PREFIX)gcc
*_GCC5_IA32_ASLCC_PATH                  = ENV(GCC_PREFIX)gcc
*_GCC5_IA32_ASLPP_PATH                  = ENV(GCC_PREFIX)gcc
*_GCC5_IA32_RC_PATH                     = ENV(GCC_PREFIX)objcopy

*_GCC5_IA32_ASLCC_FLAGS                 = DEF(GCC5_ASLCC_FLAGS) -m32
*_GCC5_IA32_ASLDLINK_FLAGS              = DEF(GCC5_IA32_X64_ASLDLINK_FLAGS) -Wl,-m,elf_i386 -no-pie
*_GCC5_IA32_ASM_FLAGS                   = DEF(GCC5_ASM_FLAGS) -m32 -march=i386
*_GCC5_IA32_DLINK2_FLAGS                = DEF(GCC5_IA32_DLINK2_FLAGS) -no-pie
*_GCC5_IA32_RC_FLAGS                    = DEF(GCC_IA32_RC_FLAGS)
*_GCC5_IA32_OBJCOPY_FLAGS               =
*_GCC5_IA32_NASM_FLAGS                  = -f elf32

  DEBUG_GCC5_IA32_CC_FLAGS              = DEF(GCC5_IA32_CC_FLAGS) -flto -Os
  DEBUG_GCC5_IA32_DLINK_FLAGS           = DEF(GCC5_IA32_X64_DLINK_FLAGS) -flto -Os -Wl,-m,elf_i386,--oformat=elf32-i386

RELEASE_GCC5_IA32_CC_FLAGS              = DEF(GCC5_IA32_CC_FLAGS) -flto -Os -Wno-unused-but-set-variable -Wno-unused-const-variable
RELEASE_GCC5_IA32_DLINK_FLAGS           = DEF(GCC5_IA32_X64_DLINK_FLAGS) -flto -Os -Wl,-m,elf_i386,--oformat=elf32-i386

  NOOPT_GCC5_IA32_CC_FLAGS              = DEF(GCC5_IA32_CC_FLAGS) -O0
  NOOPT_GCC5_IA32_DLINK_FLAGS           = DEF(GCC5_IA32_X64_DLINK_FLAGS) -Wl,-m,elf_i386,--oformat=elf32-i386 -O0

##################
# GCC5 X64 definitions
##################
*_GCC5_X64_OBJCOPY_PATH                 = ENV(GCC_PREFIX)objcopy
*_GCC5_X64_CC_PATH                      = ENV(GCC_PREFIX)gcc
*_GCC5_X64_SLINK_PATH                   = ENV(GCC_PREFIX)gcc-ar
*_GCC5_X64_DLINK_PATH                   = ENV(GCC_PREFIX)gcc
*_GCC5_X64_ASLDLINK_PATH                = ENV(GCC_PREFIX)gcc
*_GCC5_X64_ASM_PATH                     = ENV(GCC_PREFIX)gcc
*_GCC5_X64_PP_PATH                      = ENV(GCC_PREFIX)gcc
*_GCC5_X64_VFRPP_PATH                   = ENV(GCC_PREFIX)gcc
*_GCC5_X64_ASLCC_PATH                   = ENV(GCC_PREFIX)gcc
*_GCC5_X64_ASLPP_PATH                   = ENV(GCC_PREFIX)gcc
*_GCC5_X64_RC_PATH                      = ENV(GCC_PREFIX)objcopy

*_GCC5_X64_ASLCC_FLAGS                  = DEF(GCC5_ASLCC_FLAGS) -m64
*_GCC5_X64_ASLDLINK_FLAGS               = DEF(GCC5_IA32_X64_ASLDLINK_FLAGS) -Wl,-m,elf_x86_64
*_GCC5_X64_ASM_FLAGS                    = DEF(GCC5_ASM_FLAGS) -m64
*_GCC5_X64_DLINK2_FLAGS                 = DEF(GCC5_X64_DLINK2_FLAGS)
*_GCC5_X64_RC_FLAGS                     = DEF(GCC_X64_RC_FLAGS)
*_GCC5_X64_OBJCOPY_FLAGS                =
*_GCC5_X64_NASM_FLAGS                   = -f elf64

  DEBUG_GCC5_X64_CC_FLAGS               = DEF(GCC5_X64_CC_FLAGS) -flto -DUSING_LTO -Os
  DEBUG_GCC5_X64_DLINK_FLAGS            = DEF(GCC5_IA32_X64_DLINK_FLAGS) -Wl,-melf_x86_64,--oformat=elf64-x86-64,-pie -flto -Os

RELEASE_GCC5_X64_CC_FLAGS               = DEF(GCC5_X64_CC_FLAGS) -flto -DUSING_LTO -Os -Wno-unused-but-set-variable -Wno-unused-const-variable
RELEASE_GCC5_X64_DLINK_FLAGS            = DEF(GCC5_IA32_X64_DLINK_FLAGS) -Wl,-melf_x86_64,--oformat=elf64-x86-64,-pie -flto -Os

  NOOPT_GCC5_X64_CC_FLAGS               = DEF(GCC5_X64_CC_FLAGS) -O0
  NOOPT_GCC5_X64_DLINK_FLAGS            = DEF(GCC5_IA32_X64_DLINK_FLAGS) -Wl,-melf_x86_64,--oformat=elf64-x86-64,-pie -O0
####################################################################################

####################################################################################
# CLANGPDB - DEFINE
####################################################################################
DEFINE CLANGPDB_IA32_TARGET             = -target i686-unknown-windows-gnu
DEFINE CLANGPDB_X64_TARGET              = -target x86_64-unknown-windows-gnu
DEFINE CLANGPDB_ALL_F_CC_FLAGS          = DEF(GCC_ALL_F_CC_FLAGS) -fseh-exceptions -ftrap-function=undefined_behavior_has_been_optimized_away_by_clang -funsigned-char
DEFINE CLANGPDB_ALL_M_CC_FLAGS          = DEF(GCC_ALL_M_CC_FLAGS) -mms-bitfields -mno-implicit-float
DEFINE CLANGPDB_ALL_W_CC_FLAGS          = DEF(GCC_ALL_W_CC_FLAGS) -Wno-empty-body -Wno-incompatible-library-redeclaration -Wno-microsoft-enum-forward-reference -Wno-null-dereference -Wno-parentheses-equality -Wno-shift-negative-value -Wno-tautological-compare -Wno-tautological-constant-out-of-range-compare -Wno-unknown-pragmas -Wno-unknown-warning-option -Wno-unused-const-variable -Wno-varargs
DEFINE CLANGPDB_ALL_CC_FLAGS            = -g -nostdlib -nostdlibinc -include AutoGen.h -DSTRING_ARRAY_NAME=$(BASE_NAME)Strings DEF(CLANGPDB_ALL_F_CC_FLAGS) DEF(CLANGPDB_ALL_M_CC_FLAGS) DEF(CLANGPDB_ALL_W_CC_FLAGS)
DEFINE CLANGPDB_ASLCC_FLAGS             = -x c
DEFINE CLANGPDB_ASM_FLAGS               = -c -x assembler -imacros AutoGen.h
DEFINE CLANGPDB_PP_FLAGS                = -E -x assembler-with-cpp -include AutoGen.h
DEFINE CLANGPDB_ASLPP_FLAGS             = -x c -E -include AutoGen.h
DEFINE CLANGPDB_VFRPP_FLAGS             = -x c -E -P -DVFRCOMPILE --include $(MODULE_NAME)StrDefs.h
####################################################################################
# CLANGPDB - This configuration is to produce PE/COFF binaries
#      For Windows/Linux/Mac using LLVM/Clang/LLD
####################################################################################
*_CLANGPDB_*_*_FAMILY                   = GCC
*_CLANGPDB_*_*_BUILDRULEFAMILY          = CLANGPDB
*_CLANGPDB_*_MAKE_PATH                  = ENV(CLANG_HOST_BIN)make
*_CLANGPDB_*_*_DLL                      = ENV(CLANGPDB_DLL)

*_CLANGPDB_*_APP_FLAGS                  =
*_CLANGPDB_*_ASL_PATH                   = ENV(IASL_PREFIX)iasl
*_CLANGPDB_*_ASL_FLAGS                  =
*_CLANGPDB_*_ASL_OUTFLAGS               = -p
*_CLANGPDB_*_ASLDLINK_FLAGS             = /NODEFAULTLIB /ENTRY:ReferenceAcpiTable /SUBSYSTEM:CONSOLE
*_CLANGPDB_*_DEPS_FLAGS                 = -MMD -MF $@.deps
###########################
# CLANG.PE IA32 definitions
###########################
*_CLANGPDB_IA32_CC_PATH                 = ENV(CLANG_PREFIX)clang
*_CLANGPDB_IA32_SLINK_PATH              = ENV(CLANG_PREFIX)llvm-lib
*_CLANGPDB_IA32_DLINK_PATH              = ENV(CLANG_PREFIX)lld-link
*_CLANGPDB_IA32_ASLDLINK_PATH           = ENV(CLANG_PREFIX)lld-link
*_CLANGPDB_IA32_ASM_PATH                = ENV(CLANG_PREFIX)clang
*_CLANGPDB_IA32_PP_PATH                 = ENV(CLANG_PREFIX)clang
*_CLANGPDB_IA32_VFRPP_PATH              = ENV(CLANG_PREFIX)clang
*_CLANGPDB_IA32_ASLCC_PATH              = ENV(CLANG_PREFIX)clang
*_CLANGPDB_IA32_ASLPP_PATH              = ENV(CLANG_PREFIX)clang
*_CLANGPDB_IA32_RC_PATH                 = ENV(CLANG_PREFIX)llvm-rc

*_CLANGPDB_IA32_ASLCC_FLAGS             = DEF(CLANGPDB_ASLCC_FLAGS) -m32 -fno-lto DEF(CLANGPDB_IA32_TARGET)
*_CLANGPDB_IA32_ASM_FLAGS               = DEF(CLANGPDB_ASM_FLAGS) -m32 -march=i386 DEF(CLANGPDB_IA32_TARGET)
*_CLANGPDB_IA32_OBJCOPY_FLAGS           =
*_CLANGPDB_IA32_NASM_FLAGS              = -f win32
*_CLANGPDB_IA32_PP_FLAGS                = DEF(CLANGPDB_PP_FLAGS) DEF(CLANGPDB_IA32_TARGET)
*_CLANGPDB_IA32_ASLPP_FLAGS             = DEF(CLANGPDB_ASLPP_FLAGS) DEF(CLANGPDB_IA32_TARGET)
*_CLANGPDB_IA32_VFRPP_FLAGS             = DEF(CLANGPDB_VFRPP_FLAGS) DEF(CLANGPDB_IA32_TARGET)

DEBUG_CLANGPDB_IA32_CC_FLAGS            = DEF(CLANGPDB_ALL_CC_FLAGS) -m32 -Oz -flto -march=i586 DEF(CLANGPDB_IA32_TARGET) -gcodeview
DEBUG_CLANGPDB_IA32_DLINK_FLAGS         = /NOLOGO /NODEFAULTLIB /IGNORE:4001 /OPT:REF /OPT:ICF=10 /ALIGN:32 /FILEALIGN:32 /SECTION:.xdata,D /SECTION:.pdata,D /MACHINE:X86 /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /BASE:0 /DEBUG:GHASH /MLLVM:-exception-model=wineh /lldmap
DEBUG_CLANGPDB_IA32_DLINK2_FLAGS        =

RELEASE_CLANGPDB_IA32_CC_FLAGS          = DEF(CLANGPDB_ALL_CC_FLAGS) -m32 -Oz -flto -march=i586 DEF(CLANGPDB_IA32_TARGET)
RELEASE_CLANGPDB_IA32_DLINK_FLAGS       = /NOLOGO /NODEFAULTLIB /IGNORE:4001 /IGNORE:4254 /OPT:REF /OPT:ICF=10 /ALIGN:32 /FILEALIGN:32 /SECTION:.xdata,D /SECTION:.pdata,D /MACHINE:X86 /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /BASE:0 /MERGE:.rdata=.data /MLLVM:-exception-model=wineh /lldmap
RELEASE_CLANGPDB_IA32_DLINK2_FLAGS      =

NOOPT_CLANGPDB_IA32_CC_FLAGS            = DEF(CLANGPDB_ALL_CC_FLAGS) -m32 -O0 -march=i586 DEF(CLANGPDB_IA32_TARGET) -gcodeview
NOOPT_CLANGPDB_IA32_DLINK_FLAGS         = /NOLOGO /NODEFAULTLIB /IGNORE:4001 /OPT:REF /OPT:ICF=10 /ALIGN:32 /FILEALIGN:32 /SECTION:.xdata,D /SECTION:.pdata,D /MACHINE:X86 /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /BASE:0 /DEBUG:GHASH /MLLVM:-exception-model=wineh /lldmap
NOOPT_CLANGPDB_IA32_DLINK2_FLAGS        =

##########################
# CLANG.PE X64 definitions
##########################
*_CLANGPDB_X64_CC_PATH                  = ENV(CLANG_PREFIX)clang
*_CLANGPDB_X64_SLINK_PATH               = ENV(CLANG_PREFIX)llvm-lib
*_CLANGPDB_X64_DLINK_PATH               = ENV(CLANG_PREFIX)lld-link
*_CLANGPDB_X64_ASLDLINK_PATH            = ENV(CLANG_PREFIX)lld-link
*_CLANGPDB_X64_ASM_PATH                 = ENV(CLANG_PREFIX)clang
*_CLANGPDB_X64_PP_PATH                  = ENV(CLANG_PREFIX)clang
*_CLANGPDB_X64_VFRPP_PATH               = ENV(CLANG_PREFIX)clang
*_CLANGPDB_X64_ASLCC_PATH               = ENV(CLANG_PREFIX)clang
*_CLANGPDB_X64_ASLPP_PATH               = ENV(CLANG_PREFIX)clang
*_CLANGPDB_X64_RC_PATH                  = ENV(CLANG_PREFIX)llvm-rc

*_CLANGPDB_X64_ASLCC_FLAGS              = DEF(CLANGPDB_ASLCC_FLAGS) -m64 -fno-lto DEF(CLANGPDB_X64_TARGET)
*_CLANGPDB_X64_ASM_FLAGS                = DEF(CLANGPDB_ASM_FLAGS) -m64 DEF(CLANGPDB_X64_TARGET)
*_CLANGPDB_X64_OBJCOPY_FLAGS            =
*_CLANGPDB_X64_NASM_FLAGS               = -f win64
*_CLANGPDB_X64_PP_FLAGS                 = DEF(CLANGPDB_PP_FLAGS) DEF(CLANGPDB_X64_TARGET)
*_CLANGPDB_X64_ASLPP_FLAGS              = DEF(CLANGPDB_ASLPP_FLAGS) DEF(CLANGPDB_X64_TARGET)
*_CLANGPDB_X64_VFRPP_FLAGS              = DEF(CLANGPDB_VFRPP_FLAGS) DEF(CLANGPDB_X64_TARGET)

DEBUG_CLANGPDB_X64_CC_FLAGS             = DEF(CLANGPDB_ALL_CC_FLAGS) -m64 "-DEFIAPI=__attribute__((ms_abi))" -mno-red-zone -mcmodel=small -Oz -flto DEF(CLANGPDB_X64_TARGET) -gcodeview  -funwind-tables
DEBUG_CLANGPDB_X64_DLINK_FLAGS          = /NOLOGO /NODEFAULTLIB /IGNORE:4001 /OPT:REF /OPT:ICF=10 /ALIGN:32 /FILEALIGN:32 /Machine:X64 /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /BASE:0 /DEBUG:GHASH /MLLVM:-exception-model=wineh /lldmap
DEBUG_CLANGPDB_X64_DLINK2_FLAGS         =
DEBUG_CLANGPDB_X64_GENFW_FLAGS          = --keepexceptiontable

RELEASE_CLANGPDB_X64_CC_FLAGS           = DEF(CLANGPDB_ALL_CC_FLAGS) -m64 "-DEFIAPI=__attribute__((ms_abi))" -mno-red-zone -mcmodel=small -Oz -flto DEF(CLANGPDB_X64_TARGET) -fno-unwind-tables
RELEASE_CLANGPDB_X64_DLINK_FLAGS        = /NOLOGO /NODEFAULTLIB /IGNORE:4001 /IGNORE:4254 /OPT:REF /OPT:ICF=10 /ALIGN:32 /FILEALIGN:32 /SECTION:.xdata,D /SECTION:.pdata,D /Machine:X64 /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /BASE:0 /MERGE:.rdata=.data /MLLVM:-exception-model=wineh /lldmap
RELEASE_CLANGPDB_X64_DLINK2_FLAGS       =
RELEASE_CLANGPDB_X64_GENFW_FLAGS        =

NOOPT_CLANGPDB_X64_CC_FLAGS             = DEF(CLANGPDB_ALL_CC_FLAGS) -m64 "-DEFIAPI=__attribute__((ms_abi))" -mno-red-zone -mcmodel=small -O0 DEF(CLANGPDB_X64_TARGET) -gcodeview -funwind-tables
NOOPT_CLANGPDB_X64_DLINK_FLAGS          = /NOLOGO /NODEFAULTLIB /IGNORE:4001 /OPT:REF /OPT:ICF=10 /ALIGN:32 /FILEALIGN:32 /Machine:X64 /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /BASE:0 /DEBUG:GHASH /MLLVM:-exception-model=wineh /lldmap
NOOPT_CLANGPDB_X64_DLINK2_FLAGS         =
NOOPT_CLANGPDB_X64_GENFW_FLAGS          = --keepexceptiontable
####################################################################################

##################
# VfrCompiler definitions
##################
*_*_*_VFR_PATH                          = VfrCompile
*_*_*_VFR_FLAGS                         = -l -n

##################
# OptionRom tool definitions
##################
*_*_*_OPTROM_PATH                       = EfiRom
*_*_*_OPTROM_FLAGS                      = -e

##################
# GenFw tool definitions
##################
*_*_*_GENFW_PATH                        = GenFw
*_*_*_GENFW_FLAGS                       =

##################
# Asl Compiler definitions
##################
*_*_*_ASLCC_FLAGS                       = /nologo /c /FIAutoGen.h /TC /Dmain=ReferenceAcpiTable
*_*_*_ASLDLINK_FLAGS                    = /NODEFAULTLIB /ENTRY:ReferenceAcpiTable /SUBSYSTEM:CONSOLE
*_*_*_ASLPP_FLAGS                       = /nologo /EP /C
*_*_*_ASL_FLAGS                         =
*_*_*_ASL_OUTFLAGS                      = -p

##################
# GenCrc32 tool definitions
##################
*_*_*_CRC32_PATH                        = GenCrc32
*_*_*_CRC32_GUID                        = FC1BCDB0-7D31-49AA-936A-A4600D9DD083

##################
# Rsa2048Sha256Sign tool definitions
#
# Notes: This tool definition uses a test signing key for development purposes only.
#        The tool Rsa2048Sha256GenerateKeys can be used to generate a new private/public key
#        and the gEfiSecurityPkgTokenSpaceGuid.PcdRsa2048Sha256PublicKeyBuffer PCD value.
#        A custom tool/script can be implemented using the new private/public key with
#        the Rsa2048Sha256Sign tool and this tool definition can be updated to use a
#        custom tool/script.
#
#   Generate new private/public key and gEfiSecurityPkgTokenSpaceGuid.PcdRsa2048Sha256PublicKeyBuffer PCD value
#
#       Rsa2048Sha256GenerateKeys.py -o MyKey.pem --public-key-hash-c MyKey.pcd
#
#   Custom script example (MyRsa2048Sha256Sign.cmd):
#
#       Rsa2048Sha256Sign --private-key MyKey.pem %1 %2 %3 %4 %5 %6 %7 %8 %9
#
#   WARNING: Vendors that uses private keys are responsible for proper management and protection
#            of private keys.  Vendors may choose to use infrastructure such as signing servers
#            or signing portals to support the management and protection of private keys.
#
##################
*_*_*_RSA2048SHA256SIGN_PATH            = Rsa2048Sha256Sign
*_*_*_RSA2048SHA256SIGN_GUID            = A7717414-C616-4977-9420-844712A735BF

##################
# BrotliCompress tool definitions
##################
*_*_*_BROTLI_PATH                       = BrotliCompress
*_*_*_BROTLI_GUID                       = 3D532050-5CDA-4FD0-879E-0F7F630D5AFB

##################
# LzmaCompress tool definitions
##################
*_*_*_LZMA_PATH                         = LzmaCompress
*_*_*_LZMA_GUID                         = EE4E5898-3914-4259-9D6E-DC7BD79403CF

##################
# LzmaF86Compress tool definitions with converter for x86 code.
# It can improve the compression ratio if the input file is IA32 or X64 PE image.
##################
*_*_*_LZMAF86_PATH                      = LzmaF86Compress
*_*_*_LZMAF86_GUID                      = D42AE6BD-1352-4bfb-909A-CA72A6EAE889

##################
# TianoCompress tool definitions
##################
*_*_*_TIANO_PATH                        = TianoCompress
*_*_*_TIANO_GUID                        = A31280AD-481E-41B6-95E8-127F4C984779

##################
# BPDG tool definitions
##################
*_*_*_VPDTOOL_PATH                      = BPDG
*_*_*_VPDTOOL_GUID                      = 8C3D856A-9BE6-468E-850A-24F7A8D38E08

##################
# Pkcs7Sign tool definitions
##################
*_*_*_PKCS7SIGN_PATH                    = Pkcs7Sign
*_*_*_PKCS7SIGN_GUID                    = 4AAFD29D-68DF-49EE-8AA9-347D375665A7

##################
# NASM tool definitions
##################
*_*_*_NASM_PATH                         = ENV(NASM_PREFIX)nasm
# NASMB uses NASM produce a .bin from a .nasmb NASM source file
*_*_*_NASMB_FLAGS                       = -f bin

#################
# Build rule order
#################
*_*_*_*_BUILDRULEORDER                  = nasm asm Asm ASM S s nasmb asm16
